package Controller;import Bus.ArtistBus;import Bus.PlayListSongsBus;import Bus.SongBus;import DTO.ArtistsEntity;import DTO.PlaylistSongsEntity;import DTO.SongsEntity;import GUI.App;import javafx.animation.RotateTransition;import javafx.animation.Timeline;import javafx.application.Platform;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.geometry.Insets;import javafx.geometry.Pos;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.layout.*;import javafx.scene.media.Media;import javafx.scene.media.MediaPlayer;import javafx.scene.paint.Color;import javafx.scene.shape.Circle;import javafx.scene.text.Font;import javafx.stage.Stage;import javafx.util.Duration;import java.io.IOException;import java.net.URL;import java.util.*;import java.util.concurrent.CompletableFuture;import static Controller.LoginController.LOGGED_USER;public class Dashboard_Controller {    private static Stage loginStage;    private static Stage logupStage;    private BorderPane trendingSongPane;    private Pane favoritePane;    private Pane songsPane;    private ScrollPane albumPane;    private GridPane musicTagsPane;    private List<SongsEntity> songs = new SongBus().getAllSongs();    private List<SongsEntity> trendingSongs = new SongBus().getTrendingSongs();    private List<ArtistsEntity> artists = new ArtistBus().getAllArtists();    private List<PlaylistSongsEntity> playlists = new PlayListSongsBus().getAllPlaylistSongs();    private MediaPlayer mediaPlayer;    private int totalDurationSeconds;    private Random random = new Random();    private Queue<SongsEntity> songHistory = new LinkedList<>();    private Label username;    private HBox hbox;    @FXML    private ImageView songIV;    @FXML    private Label artistLB;    @FXML    private BorderPane borderPane;    @FXML    private Slider durationSlider;    @FXML    private Button favoriteBT;    @FXML    private Label finishDur;    @FXML    private Button homeBT;    @FXML    private Button loginBT;    @FXML    private Button playBT;    @FXML    private ImageView playandpauseIV;    @FXML    private Button signupBT;    @FXML    private Label songTitleLB;    @FXML    private Slider soundSlider;    @FXML    private ImageView soundIV;    @FXML    private Label startDur;    @FXML    private Button repeatBT;    @FXML    private ImageView repeatIV;    @FXML    private HBox logHbox;    @FXML    private Button albumBT;    @FXML    private Button playlistBT;    @FXML    private Button songBT;    @FXML    private Button artistBT;    @FXML    void login() {        if (LOGGED_USER != null) {        } else {            hbox = logHbox;            try {                App.stage.close();                FXMLLoader fxmlLoader = new FXMLLoader(Dashboard_Controller.class.getResource("/GUI/login.fxml"));                Parent root = fxmlLoader.load();                loginStage = new Stage();                loginStage.initModality(javafx.stage.Modality.APPLICATION_MODAL);                loginStage.setTitle("Login");                loginStage.setScene(new Scene(root));                loginStage.setResizable(false);                loginStage.show();            } catch (IOException e) {                e.printStackTrace();            }        }    }    private void logout() {        LOGGED_USER = null;        loginBT.setText("Login");        loginBT.setOnAction(event -> login());        signupBT.setVisible(true);        App.stage.close();        try {            FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource("dash-board.fxml"));            Parent root = fxmlLoader.load();            App.stage.setScene(new Scene(root));            App.stage.setTitle("VibeLab");            App.stage.show();        } catch (IOException e) {            e.printStackTrace();        }    }    @FXML    void signup(ActionEvent event) {        if (LOGGED_USER != null) {        } else {            try {                FXMLLoader fxmlLoader = new FXMLLoader(Dashboard_Controller.class.getResource("/GUI/logup.fxml"));                Parent root = fxmlLoader.load();                logupStage = new Stage();                logupStage.initModality(javafx.stage.Modality.APPLICATION_MODAL);                logupStage.setTitle("Sign Up");                logupStage.setScene(new Scene(root));                logupStage.setResizable(false);                logupStage.show();            } catch (IOException e) {                e.printStackTrace();            }        }    }    public static void closeLogin() {        if (loginStage != null) {            Platform.runLater(() -> {                App.stage.setTitle("VibeLab - " + LOGGED_USER.getUsername());                Dashboard_Controller controller = new Dashboard_Controller();            });            loginStage.close();        }    }    public static void closeLogup() {        if (logupStage != null) {            logupStage.close();        }    }    @FXML    void initialize() {        if (LOGGED_USER != null) {            loginBT.setText("Logout");            loginBT.setStyle("-fx-font-size: 15px; -fx-background-color: #fff; -fx-font-family: 'Berlin Sans FB';");            loginBT.setOnAction(event -> logout());            signupBT.setText(LOGGED_USER.getUsername());            signupBT.setStyle("-fx-font-size: 13px; -fx-background-color: transparent; -fx-font-family: 'Berlin Sans FB'");            signupBT.setDisable(true);            showHomePane(null);        } else {            loginBT.setText("Login");            loginBT.setOnAction(event -> login());            signupBT.setDisable(false);            signupBT.setText("Log Up");        }    }    @FXML    void showHomePane(ActionEvent event) {        if (trendingSongPane == null) {            CompletableFuture.supplyAsync(() -> {                return getTrendingSongPane();            }).thenAcceptAsync(pane -> {                Platform.runLater(() -> {                    borderPane.setCenter(pane);                });            });        } else {            borderPane.setCenter(trendingSongPane);        }        ClearBTStyle();        homeBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");    }    private void ClearBTStyle() {        homeBT.setStyle("-fx-background-color: transparent");        albumBT.setStyle("-fx-background-color: transparent");        favoriteBT.setStyle("-fx-background-color: transparent");        playlistBT.setStyle("-fx-background-color: transparent");        songBT.setStyle("-fx-background-color: transparent");        artistBT.setStyle("-fx-background-color: transparent");    }    @FXML    void showFavoritePane(ActionEvent event) {        borderPane.setCenter(favoritePane = createFavoritePane());        ClearBTStyle();        favoriteBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");    }    @FXML    void showSongsPane(ActionEvent event) {        songsPane = createSongsPane();        borderPane.setCenter(songsPane);        ClearBTStyle();        songBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");    }    @FXML    void showAlbumPane(ActionEvent event) throws IOException {        borderPane.setCenter(albumPane = createAlbumPane());        ClearBTStyle();        albumBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");    }    public BorderPane getTrendingSongPane() {        trendingSongPane = new BorderPane();        trendingSongPane.setCenter(createMusicTagScrollPane());        return trendingSongPane;    }    private ScrollPane createMusicTagScrollPane() {        ScrollPane musicTagScrollPane = new ScrollPane();        musicTagScrollPane.setFitToWidth(true);        musicTagScrollPane.setFitToHeight(true);        musicTagScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        musicTagScrollPane.prefWidthProperty().bind(trendingSongPane.widthProperty());        musicTagScrollPane.prefHeightProperty().bind(trendingSongPane.heightProperty());        musicTagsPane = new GridPane();        musicTagsPane.setHgap(10);        musicTagsPane.setVgap(10);        addMusicTags();        musicTagScrollPane.setContent(musicTagsPane);        musicTagScrollPane.setStyle("-fx-background-color: #181818;-fx-font-style: Times New Roman;");        musicTagsPane.setStyle("-fx-background-color: #181818; -fx-padding: 15px 0 0 10px;");        return musicTagScrollPane;    }    private Pane createFavoritePane() {        Pane pane = new Pane();        Button button = new Button("Favorite Pane");        button.setOnAction(event -> {            System.out.println("Favorite Pane");        });        pane.getChildren().add(button);        pane.setStyle("-fx-background-color: lightgreen;");        pane.setPrefSize(100, 300);        return pane;    }    private Pane createSongsPane() {        Pane pane = new Pane();        Button button = new Button("Songs Pane");        button.setOnAction(event -> {            System.out.println("Songs Pane");        });        pane.getChildren().add(button);        pane.setStyle("-fx-background-color: lightcoral;");        pane.setPrefSize(400, 300);        return pane;    }    private ScrollPane createAlbumPane() throws IOException {        VBox vBox = new VBox();        vBox.setStyle("-fx-background-color: #181818");        HBox hBox1 = new HBox();        Label label1 = new Label("Một vạn năm - Vũ");        label1.getStyleClass().add("album-label");        label1.setAlignment(Pos.CENTER);        VBox.setMargin(label1, new Insets(10));        ScrollPane scrollPane1 = new ScrollPane();        scrollPane1.prefWidthProperty().bind(vBox.widthProperty());        scrollPane1.setMinHeight(200);        scrollPane1.setContent(hBox1);        VBox.setVgrow(scrollPane1, Priority.ALWAYS);        Label label2 = new Label("99Percent - MCK");        label2.getStyleClass().add("album-label");        label2.setAlignment(Pos.CENTER);        VBox.setMargin(label2, new Insets(10));        ScrollPane scrollPane2 = new ScrollPane();        scrollPane2.prefWidthProperty().bind(vBox.widthProperty());        scrollPane2.setMinHeight(200);        VBox.setVgrow(scrollPane2, Priority.ALWAYS);        Label label3 = new Label("Sky Tour - MTP");        label3.getStyleClass().add("album-label");        label3.setAlignment(Pos.CENTER);        VBox.setMargin(label3, new Insets(10));        ScrollPane scrollPane3 = new ScrollPane();        scrollPane3.prefWidthProperty().bind(vBox.widthProperty());        scrollPane3.setMinHeight(200);        VBox.setVgrow(scrollPane2, Priority.ALWAYS);        vBox.alignmentProperty().setValue(Pos.CENTER);        vBox.getChildren().addAll(label1, scrollPane1, label2, scrollPane2, label3, scrollPane3);        ScrollPane scrollPane = new ScrollPane(vBox);        scrollPane.setFitToHeight(true);        scrollPane.setFitToWidth(true);        scrollPane.setStyle("-fx-background-color: #181818");        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        return scrollPane;    }    private void addMusicTags() {        // Add music tags to the music tags list        int row = 0;        int col = 0;        for (SongsEntity song : trendingSongs) {            for (ArtistsEntity artist : artists) {                if (song.getArtistId() == artist.getArtistId()) {                    Pane musicTag = createMusicTag(song.getTitle(), artist.getName(), song.getSongUrl(), song.getImgUrl());                    musicTagsPane.add(musicTag, col, row);                    if (col == 4) {                        col = 0;                        row++;                    } else {                        col++;                    }                }            }        }    }    private Pane createMusicTag(String title, String artist, String songUrl, String imgUrl) {        StackPane musicTag = new StackPane();        // Create a VBox to hold the ImageView and Label        VBox container = new VBox();        container.setAlignment(Pos.CENTER); // Make the VBox center-aligned        ImageView imageView = new ImageView(new Image(imgUrl));        imageView.setFitWidth(100);        imageView.setFitHeight(100);        // Create a label to display the song title and artist        String s = title + " - " + artist;        Label tagNameLabel = new Label(s);        tagNameLabel.getStyleClass().add("tag-name");        container.getChildren().addAll(imageView, tagNameLabel);        musicTag.getChildren().add(container);        musicTag.setOnMouseClicked(event -> {            playSong(songUrl);            playandpauseIV.setImage(new Image(getClass().getResource("/music/img/pause.png").toString()));            songIV.setImage(new Image(imgUrl));            songTitleLB.setText(title);            songTitleLB.setStyle("-fx-font-size:15px;-fx-font-weight: bold;");            artistLB.setText(artist);            artistLB.setStyle("-fx-font-size:12px;");            new SongBus().updatePlayCount(title);        });        musicTag.getStyleClass().add("music-tag");        return musicTag;    }    @FXML    void playSong(String songUrl) {        System.out.println("Playing song: " + songUrl);        Media media = new Media(songUrl);        songIV.setClip(new Circle(songIV.getFitWidth() / 2, songIV.getFitHeight() / 2, songIV.getFitWidth() / 2));        playandpauseIV.setImage(new Image(getClass().getResource("/music/img/pause.png").toString()));        playBT.setOnAction(event -> pause());        addToSongHistory(songs.stream().filter(song -> song.getSongUrl().equals(songUrl)).findFirst().get());        try {            if (mediaPlayer != null) {                mediaPlayer.stop();                mediaPlayer.dispose(); // Release the media player resources            }            mediaPlayer = new MediaPlayer(media);            mediaPlayer.setVolume(soundSlider.getValue() / 100);            mediaPlayer.setOnPlaying(() -> {                updateDurationLabel(); // Cập nhật nhãn thời gian chờ                updateTimeSlider(); // Cập nhật thanh trượt thời gian                updateCurrentTimeLabel(); // Cập nhật nhãn thời gian hiện tại                totalDurationSeconds = (int) mediaPlayer.getTotalDuration().toSeconds();                rotateImage();            });            // Cập nhật thời gian hiện tại liên tục            mediaPlayer.currentTimeProperty().addListener((observable, oldValue, newValue) -> {                updateCurrentTimeLabel();                updateTimeSlider();            });            soundSlider.valueProperty().addListener((observable, oldValue, newValue) -> {                if (mediaPlayer != null) {                    mediaPlayer.setVolume(newValue.doubleValue() / 100.0);                }            });            // Update the media player's time when the slider is moved            durationSlider.valueProperty().addListener((observable, oldValue, newValue) -> {                if (durationSlider.isValueChanging()) {                    mediaPlayer.seek(Duration.seconds(newValue.doubleValue()));                }            });            mediaPlayer.setOnEndOfMedia(() -> {                if (mediaPlayer.getCycleCount() == 0) {//                    playandpauseIV.setImage(new Image(getClass().getResource("/music/img/ic_play (1).png").toString()));                    // Play a random song when the current song has finished playing                    SongsEntity randomSong = randomSong();                    playSong(randomSong.getSongUrl());                    songIV.setImage(new Image(randomSong.getImgUrl()));                    songTitleLB.setText(randomSong.getTitle());                    for (ArtistsEntity artist : artists) {                        if (randomSong.getArtistId() == artist.getArtistId()) {                            artistLB.setText(artist.getName());                        }                    }                } else {                    mediaPlayer.stop();                    mediaPlayer.seek(Duration.ZERO);                    mediaPlayer.play();                }            });            mediaPlayer.play();        } catch (Exception e) {            e.printStackTrace();        }    }    private void updateTimeSlider() {        // Đặt giá trị tối đa của thanh trượt thành thời lượng của media        durationSlider.setMax(mediaPlayer.getTotalDuration().toSeconds());        // Đặt giá trị của thanh trượt thành thời gian hiện tại của media        durationSlider.setValue(mediaPlayer.getCurrentTime().toSeconds());    }    private void updateDurationLabel() {        int durationSeconds = (int) mediaPlayer.getTotalDuration().toSeconds();        // Chuyển đổi sang định dạng mm:ss        int minutes = durationSeconds / 60;        int seconds = durationSeconds % 60;        finishDur.setText(String.format("%02d:%02d", minutes, seconds));    }    private void updateCurrentTimeLabel() {        // Lấy thời gian hiện tại của media        int currentTimeSeconds = (int) mediaPlayer.getCurrentTime().toSeconds();        // Chuyển đổi sang định dạng mm:ss        int minutes = currentTimeSeconds / 60;        int seconds = currentTimeSeconds % 60;        // Hiển thị thời gian hiện tại trên nhãn        startDur.setText(String.format("%02d:%02d", minutes, seconds));    }    @FXML    void pause() {        if (mediaPlayer != null && mediaPlayer.getStatus() == MediaPlayer.Status.PLAYING) {            playandpauseIV.setImage(new Image(getClass().getResource("/music/img/ic_play (1).png").toString()));            mediaPlayer.pause();            playBT.setOnAction(event -> resume());        }    }    private void resume() {        if (mediaPlayer != null && mediaPlayer.getStatus() == MediaPlayer.Status.PAUSED) {            playandpauseIV.setImage(new Image(getClass().getResource("/music/img/pause.png").toString()));            mediaPlayer.play();            playBT.setOnAction(event -> pause());        }    }    private void rotateImage() {        RotateTransition rotateTransition = new RotateTransition(Duration.seconds(totalDurationSeconds), songIV);        rotateTransition.setByAngle(360);        rotateTransition.setCycleCount(Timeline.INDEFINITE);        rotateTransition.setDuration(Duration.seconds(10));        rotateTransition.play();    }    @FXML    void sound(ActionEvent event) {        if (mediaPlayer != null) {            if (mediaPlayer.getVolume() == 0) {                mediaPlayer.setVolume(soundSlider.getValue() / 100);                soundIV.setImage(new Image(getClass().getResource("/music/img/ic_volume.png").toString()));            } else {                mediaPlayer.setVolume(0);                soundIV.setImage(new Image(getClass().getResource("/music/img/mute.png").toString()));            }        }    }    @FXML    void nextSong(ActionEvent event) {        if (mediaPlayer != null) {            SongsEntity randomSong = randomSong();            playSong(randomSong.getSongUrl());            songIV.setImage(new Image(randomSong.getImgUrl()));            songTitleLB.setText(randomSong.getTitle());            for (ArtistsEntity artist : artists) {                if (randomSong.getArtistId() == artist.getArtistId()) {                    artistLB.setText(artist.getName());                }            }        }    }    @FXML    void previousSong(ActionEvent event) {        if (mediaPlayer != null) {            SongsEntity previousSong = getPreviousSong();            playSong(previousSong.getSongUrl());            songIV.setImage(new Image(previousSong.getImgUrl()));            songTitleLB.setText(previousSong.getTitle());            for (ArtistsEntity artist : artists) {                if (previousSong.getArtistId() == artist.getArtistId()) {                    artistLB.setText(artist.getName());                }            }        }    }    private SongsEntity randomSong() {        int randomIndex = random.nextInt(songs.size());        return songs.get(randomIndex);    }    private void addToSongHistory(SongsEntity song) {        if (song != null) {            songHistory.offer(song);        }    }    private SongsEntity getPreviousSong() {        return songHistory.poll();    }    @FXML    void repeatOneSong() {        if (mediaPlayer != null) {            mediaPlayer.setCycleCount(1);            repeatIV.setImage(new Image(getClass().getResource("/music/img/repeat-once.png").toString()));            repeatBT.setOnAction(event -> exitRepeatMode());        }    }    void exitRepeatMode() {        if (mediaPlayer != null) {            mediaPlayer.setCycleCount(0);            repeatIV.setImage(new Image(getClass().getResource("/music/img/ic_repeat.png").toString()));            repeatBT.setOnAction(event -> repeatOneSong());        }    }}