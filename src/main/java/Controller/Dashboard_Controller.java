package Controller;import Bus.*;import DTO.*;import GUI.App;import javafx.animation.RotateTransition;import javafx.animation.Timeline;import javafx.application.Platform;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.geometry.Insets;import javafx.geometry.Pos;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.input.KeyCode;import javafx.scene.layout.*;import javafx.scene.media.Media;import javafx.scene.media.MediaPlayer;import javafx.scene.shape.Circle;import javafx.scene.text.Font;import javafx.stage.Modality;import javafx.stage.Stage;import javafx.util.Duration;import java.io.IOException;import java.util.*;import java.util.concurrent.CompletableFuture;import java.util.stream.Collectors;import static Controller.LoginController.LOGGED_USER;import static Utilz.Utilz.showErrorAlert;public class Dashboard_Controller {    private static final int NUM_OF_COLUMNS = 5;    private static Stage loginStage;    private static Stage logupStage;    private BorderPane trendingSongPane;    private BorderPane favoritePane;    private BorderPane playlistPane;    private BorderPane songsPane;    private ScrollPane albumPane;    private BorderPane artistsPane;    private VBox playlistVBox;    private GridPane musicTagsPane;    private GridPane musicTagsPane2;    private GridPane musicTagsPane3;    private FlowPane musicTagsPane4;    private List<SongsEntity> songs = new SongBus().getAllSongs();    private List<SongsEntity> trendingSongs = new SongBus().getTrendingSongs();    private List<ArtistsEntity> artists = new ArtistBus().getAllArtists();    List<AlbumsEntity> albums = new AlbumBus().getAllAlbums();    private List<PlaylistsEntity> playlists;    private List<PlaylistSongsEntity> playlistSongs;    private List<FavoriteSong> favoriteSongs;    private ScrollPane scrollPane1;    private ScrollPane scrollPane2;    private ScrollPane scrollPane3;    private GridPane gridPane1;    private GridPane gridPane2;    private GridPane gridPane3;    private MediaPlayer mediaPlayer;    private int totalDurationSeconds;    private Random random = new Random();    private int selectedSongId;    private Queue<SongsEntity> songHistory = new LinkedList<>();    private Label username;    private HBox hbox;    private ContextMenu contextMenu;    private MenuItem playlistItem;    private MenuItem favoriteItem;    @FXML    private ImageView songIV;    @FXML    private Label artistLB;    @FXML    private BorderPane borderPane;    @FXML    private Slider durationSlider;    @FXML    private Button favoriteBT;    @FXML    private Label finishDur;    @FXML    private Button homeBT;    @FXML    private Button loginBT;    @FXML    private Button playBT;    @FXML    private ImageView playandpauseIV;    @FXML    private Button signupBT;    @FXML    private Label songTitleLB;    @FXML    private Slider soundSlider;    @FXML    private ImageView soundIV;    @FXML    private Label startDur;    @FXML    private Button repeatBT;    @FXML    private ImageView repeatIV;    @FXML    private HBox logHbox;    @FXML    private Button albumBT;    @FXML    private Button playlistBT;    @FXML    private Button songBT;    @FXML    private Button artistBT;    @FXML    private Button newPlaylistBT;    @FXML    private HBox searchHbox;    @FXML    private TextField searchTF;    @FXML    void login() {        if (LOGGED_USER != null) {        } else {            hbox = logHbox;            try {                App.stage.close();                FXMLLoader fxmlLoader = new FXMLLoader(Dashboard_Controller.class.getResource("/GUI/login.fxml"));                Parent root = fxmlLoader.load();                loginStage = new Stage();                loginStage.initModality(javafx.stage.Modality.APPLICATION_MODAL);                loginStage.setTitle("Login");                loginStage.setScene(new Scene(root));                loginStage.setResizable(false);                loginStage.getIcons().add(new Image(getClass().getResource("/music/img/logoVL.png").toString()));                loginStage.show();            } catch (IOException e) {                e.printStackTrace();            }        }    }    private void logout() {        LOGGED_USER = null;        loginBT.setText("Login");        loginBT.setOnAction(event -> login());        signupBT.setVisible(true);        App.stage.close();        try {            FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource("dash-board.fxml"));            Parent root = fxmlLoader.load();            App.stage.setScene(new Scene(root));            App.stage.setTitle("VibeLab");            App.stage.show();        } catch (IOException e) {            e.printStackTrace();        }    }    @FXML    void signup(ActionEvent event) {        if (LOGGED_USER != null) {        } else {            try {                FXMLLoader fxmlLoader = new FXMLLoader(Dashboard_Controller.class.getResource("/GUI/logup.fxml"));                Parent root = fxmlLoader.load();                logupStage = new Stage();                logupStage.initModality(javafx.stage.Modality.APPLICATION_MODAL);                logupStage.setTitle("Sign Up");                logupStage.setScene(new Scene(root));                logupStage.setResizable(false);                logupStage.getIcons().add(new Image(getClass().getResource("/music/img/logoVL.png").toString()));                logupStage.show();            } catch (IOException e) {                e.printStackTrace();            }        }    }    public static void closeLogin() {        if (loginStage != null) {            Platform.runLater(() -> {                if (LOGGED_USER != null) {                    App.stage.setTitle("VibeLab - " + LOGGED_USER.getUsername());                }            });            loginStage.close();        }    }    public static void closeLogup() {        if (logupStage != null) {            logupStage.close();        }    }    @FXML    void initialize() {        if (LOGGED_USER != null) {            loginBT.setText("Logout");            loginBT.setStyle("-fx-font-size: 15px; -fx-background-color: #fff; -fx-font-family: 'Berlin Sans FB';");            loginBT.setOnAction(event -> logout());            signupBT.setText(LOGGED_USER.getUsername());            signupBT.setStyle("-fx-font-size: 13px; -fx-background-color: transparent; -fx-font-family: 'Berlin Sans FB'");            signupBT.setDisable(true);            showTrendingSongPane(null);            playlists = new PlaylistBus().getPlaylists(LOGGED_USER.getUserId());            favoriteSongs = new FavoriteSongBus().getFavoriteSongs(LOGGED_USER.getUserId());            musicTagsPane3 = new GridPane();        } else {            loginBT.setText("Login");            loginBT.setOnAction(event -> login());            signupBT.setDisable(false);            signupBT.setText("Log Up");        }        createMenuAddingItems();    }    @FXML    void showTrendingSongPane(ActionEvent event) {        if (LOGGED_USER != null) {            if (trendingSongPane == null) {                CompletableFuture.supplyAsync(() -> {                    return getTrendingSongPane();                }).thenAcceptAsync(pane -> {                    Platform.runLater(() -> {                        borderPane.setCenter(pane);                    });                });            } else {                borderPane.setCenter(trendingSongPane);            }            ClearBTStyle();            homeBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");        } else {            showErrorAlert("Login Required", "Please login to access this feature.");        }    }    @FXML    void showFavoritePane(ActionEvent event) {        if (LOGGED_USER != null) {            CompletableFuture.supplyAsync(() -> {                favoriteSongs = new FavoriteSongBus().getFavoriteSongs(LOGGED_USER.getUserId());                return getFavoritePane();            }).thenAcceptAsync(pane -> {                Platform.runLater(() -> {                    borderPane.setCenter(pane);                });            });            ClearBTStyle();            favoriteBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");        } else {            showErrorAlert("Login Required", "Please login to access this feature.");        }    }    @FXML    void showPlaylistPane(ActionEvent event) {        if (LOGGED_USER != null) {            playlists = new PlaylistBus().getPlaylists(LOGGED_USER.getUserId());            playlistSongs = new ArrayList<>(); // Initialize the list            for (PlaylistsEntity playlist : playlists) {                playlistSongs.addAll(new PlaylistBus().getPlaylistSongs(playlist.getPlaylistId()));            }            CompletableFuture.supplyAsync(this::getPlaylistPane)                    .thenAcceptAsync(pane -> Platform.runLater(() -> borderPane.setCenter(pane)));            ClearBTStyle();            playlistBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");        } else {            showErrorAlert("Login Required", "Please login to access this feature.");        }    }    @FXML    void showSongsPane(ActionEvent event) {        if (LOGGED_USER != null) {            if (songsPane == null) {                CompletableFuture.supplyAsync(() -> {                    return getSongsPane();                }).thenAcceptAsync(pane -> {                    Platform.runLater(() -> {                        borderPane.setCenter(pane);                    });                });            } else {                borderPane.setCenter(songsPane);            }            ClearBTStyle();            songBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");        } else {            showErrorAlert("Login Required", "Please login to access this feature.");        }    }    @FXML    void showAlbumPane(ActionEvent event) throws IOException {        if (LOGGED_USER != null) {            if (albumPane == null) {                borderPane.setCenter(albumPane = AlbumScrollPane());            } else {                borderPane.setCenter(albumPane);            }            ClearBTStyle();            albumBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");        } else {            showErrorAlert("Login Required", "Please login to access this feature.");        }    }    @FXML    void showArtistPane(ActionEvent event) {        if (LOGGED_USER != null) {            if (artistsPane == null) {                artistsPane = getArtistPane();                borderPane.setCenter(artistsPane);            } else {                borderPane.setCenter(artistsPane);            }            ClearBTStyle();            artistBT.setStyle("-fx-border-color:#1ED760;-fx-border-width: 0 0 0 5;-fx-background-color: #121212;-fx-text-fill: #fff;");        } else {            showErrorAlert("Login Required", "Please login to access this feature.");        }    }    private void ClearBTStyle() {        homeBT.setStyle("-fx-background-color: transparent");        albumBT.setStyle("-fx-background-color: transparent");        favoriteBT.setStyle("-fx-background-color: transparent");        playlistBT.setStyle("-fx-background-color: transparent");        songBT.setStyle("-fx-background-color: transparent");        artistBT.setStyle("-fx-background-color: transparent");    }    public BorderPane getTrendingSongPane() {        trendingSongPane = new BorderPane();        trendingSongPane.setCenter(trendingSongScrollPane());        return trendingSongPane;    }    public BorderPane getFavoritePane() {        favoritePane = new BorderPane();        favoritePane.setCenter(favouriteScrollPane());        return favoritePane;    }    public BorderPane getPlaylistPane() {        playlistPane = new BorderPane();        playlistPane.setCenter(playlistScrollPane());        return playlistPane;    }    public BorderPane getSongsPane() {        songsPane = new BorderPane();        songsPane.setCenter(songScrollPane());        return songsPane;    }    public BorderPane getArtistPane() {        artistsPane = new BorderPane();        artistsPane.setCenter(ArtistScrollPane());        return artistsPane;    }    private ScrollPane trendingSongScrollPane() {        ScrollPane musicTagScrollPane = new ScrollPane();        musicTagScrollPane.setFitToWidth(true);        musicTagScrollPane.setFitToHeight(true);        musicTagScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        musicTagScrollPane.prefWidthProperty().bind(trendingSongPane.widthProperty());        musicTagScrollPane.prefHeightProperty().bind(trendingSongPane.heightProperty());        musicTagsPane = new GridPane();        musicTagsPane.setHgap(20);        musicTagsPane.setVgap(20);        addTrendingMusicTags();        musicTagScrollPane.setContent(musicTagsPane);        musicTagScrollPane.setStyle("-fx-background-color: #181818;-fx-font-style: Times New Roman;");        musicTagsPane.setStyle("-fx-background-color: #181818; -fx-padding: 15px 0 0 10px;");        return musicTagScrollPane;    }    private ScrollPane favouriteScrollPane() {        ScrollPane favouriteScrollPane = new ScrollPane();        favouriteScrollPane.setFitToWidth(true);        favouriteScrollPane.setFitToHeight(true);        favouriteScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        favouriteScrollPane.prefWidthProperty().bind(favouriteScrollPane.widthProperty());        favouriteScrollPane.prefHeightProperty().bind(favouriteScrollPane.heightProperty());        musicTagsPane2 = new GridPane();        musicTagsPane2.setHgap(10);        musicTagsPane2.setVgap(10);        addFavoriteMusicTags();        favouriteScrollPane.setContent(musicTagsPane2);        favouriteScrollPane.setStyle("-fx-background-color: #181818;-fx-font-style: Times New Roman;");        musicTagsPane2.setStyle("-fx-background-color: #181818; -fx-padding: 15px 0 0 10px;");        return favouriteScrollPane;    }    private ScrollPane playlistScrollPane() {        ScrollPane playlistScrollPane = new ScrollPane();        playlistScrollPane.setFitToWidth(true);        playlistScrollPane.setFitToHeight(true);        playlistScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        playlistScrollPane.prefWidthProperty().bind(playlistScrollPane.widthProperty());        musicTagsPane3.setHgap(20);        musicTagsPane3.setVgap(20);        addPlaylistMusicTags();        playlistScrollPane.setContent(musicTagsPane3);        playlistScrollPane.setStyle("-fx-background-color: #181818;-fx-font-style: Times New Roman;");        musicTagsPane3.setStyle("-fx-background-color: #181818; -fx-padding: 15px 0 0 10px;");        return playlistScrollPane;    }    private ScrollPane songScrollPane() {        ScrollPane songScrollPane = new ScrollPane();        songScrollPane.setFitToWidth(true);        songScrollPane.setFitToHeight(true);        songScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        songScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        songScrollPane.prefWidthProperty().bind(songScrollPane.widthProperty());        musicTagsPane4 = new FlowPane();        musicTagsPane4.setHgap(20);        musicTagsPane4.setVgap(20);        musicTagsPane4.setPadding(new Insets(15, 10, 15, 10));        addMusicTags();        songScrollPane.setContent(musicTagsPane4);        songScrollPane.setFitToWidth(true);        songScrollPane.setStyle("-fx-background-color: #181818;-fx-font-style: Times New Roman;");        musicTagsPane4.setStyle("-fx-background-color: #181818; -fx-padding: 15px 0 0 10px;");        return songScrollPane;    }    private ScrollPane AlbumScrollPane() {        VBox vBox = new VBox();        vBox.setStyle("-fx-background-color: #181818");        HBox hBox1 = new HBox();        Label label1 = new Label("Một vạn năm - Vũ");        label1.getStyleClass().add("album-label");        label1.setAlignment(Pos.CENTER);        VBox.setMargin(label1, new Insets(10));        scrollPane1 = new ScrollPane();        scrollPane1.prefWidthProperty().bind(vBox.widthProperty());        scrollPane1.setMinHeight(140);        scrollPane1.setContent(hBox1);        scrollPane1.setStyle("-fx-background-color: #181818");        scrollPane1.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        scrollPane1.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        VBox.setVgrow(scrollPane1, Priority.ALWAYS);        Label label2 = new Label("99% - MCK");        label2.getStyleClass().add("album-label");        label2.setAlignment(Pos.CENTER);        VBox.setMargin(label2, new Insets(10));        scrollPane2 = new ScrollPane();        scrollPane2.prefWidthProperty().bind(vBox.widthProperty());        scrollPane2.setMinHeight(140);        scrollPane2.setStyle("-fx-background-color: #181818");        scrollPane2.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        scrollPane2.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        VBox.setVgrow(scrollPane2, Priority.ALWAYS);        Label label3 = new Label("Sky Tour - Sơn Tùng MTP");        label3.getStyleClass().add("album-label");        label3.setAlignment(Pos.CENTER);        VBox.setMargin(label3, new Insets(10));        scrollPane3 = new ScrollPane();        scrollPane3.prefWidthProperty().bind(vBox.widthProperty());        scrollPane3.setMinHeight(140);        scrollPane3.setStyle("-fx-background-color: #181818");        scrollPane3.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        scrollPane3.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        VBox.setVgrow(scrollPane2, Priority.ALWAYS);        vBox.alignmentProperty().setValue(Pos.CENTER);        vBox.getChildren().addAll(label1, scrollPane1, label2, scrollPane2, label3, scrollPane3);        addAlbumTags();        ScrollPane scrollPane = new ScrollPane(vBox);        scrollPane.setFitToHeight(true);        scrollPane.setFitToWidth(true);        scrollPane.setStyle("-fx-background-color: #181818");        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        return scrollPane;    }    private ScrollPane ArtistScrollPane() {        ScrollPane artistScrollPane = new ScrollPane();        artistScrollPane.setFitToWidth(true);        artistScrollPane.setFitToHeight(true);        artistScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        artistScrollPane.prefWidthProperty().bind(artistScrollPane.widthProperty());        GridPane artistGridPane = new GridPane();        artistGridPane.setHgap(20);        artistGridPane.setVgap(20);        int row = 0;        int col = 0;        for (ArtistsEntity artist : artists) {            Pane artistTag = createArtistTag(artist.getName(), artist.getImageUrl());            artistGridPane.add(artistTag, col, row); // Add the artist tag to the grid pane            col++;            if (col == NUM_OF_COLUMNS) {                col = 0;                row++;            }        }        artistScrollPane.setContent(artistGridPane);        artistScrollPane.setStyle("-fx-background-color: #181818;-fx-font-style: Times New Roman;");        artistGridPane.setStyle("-fx-background-color: #181818; -fx-padding: 15px 0 0 10px;");        return artistScrollPane;    }    private void addTrendingMusicTags() {        // Add music tags to the music tags list        int row = 0;        int col = 0;        for (SongsEntity song : trendingSongs) {            for (ArtistsEntity artist : artists) {                if (song.getArtistId() == artist.getArtistId()) {                    Pane musicTag = createMusicTag(song.getTitle(), artist.getName(), song.getSongUrl(), song.getImgUrl());                    musicTagsPane.add(musicTag, col, row);                    if (col == 4) {                        col = 0;                        row++;                    } else {                        col++;                    }                }            }        }    }    private void addFavoriteMusicTags() {        int row2 = 0;        int col2 = 0;        // Add music tags to the music tags list        for (FavoriteSong song : favoriteSongs) {            for (SongsEntity song1 : songs) {                if (song.getSongId() == song1.getSongId() && song.getUserId() == LOGGED_USER.getUserId()) {                    for (ArtistsEntity artist : artists) {                        if (song1.getArtistId() == artist.getArtistId()) {                            Pane musicTag = createMusicTag(song1.getTitle(), artist.getName(), song1.getSongUrl(), song1.getImgUrl());                            musicTagsPane2.add(musicTag, col2, row2);                            if (col2 == 4) {                                col2 = 0;                                row2++;                            } else {                                col2++;                            }                        }                    }                }            }        }    }    private void addPlaylistMusicTags() {        int maxColumns = 4;        if (playlists == null || playlists.isEmpty()) {            System.out.println("No playlists available");            return;        }        musicTagsPane3.getChildren().clear();        int row3 = 0;        for (PlaylistsEntity playlist : playlists) {            Label playlistLabel = new Label(playlist.getTitle());            playlistLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 16px;-fx-font-family: 'Times New Roman';-fx-text-fill: #fff;");            musicTagsPane3.add(playlistLabel, 0, row3, maxColumns, 1);            row3++;            int col3 = 0;            List<PlaylistSongsEntity> playlistSongsInCurrentPlaylist = playlistSongs.stream()                    .filter(ps -> ps.getPlaylistId() == playlist.getPlaylistId())                    .collect(Collectors.toList());            if (playlistSongsInCurrentPlaylist.isEmpty()) {                System.out.println("Playlist is empty: " + playlist.getTitle());                continue;            }            for (PlaylistSongsEntity playlistSong : playlistSongsInCurrentPlaylist) {                SongsEntity song = songs.stream()                        .filter(s -> s.getSongId() == playlistSong.getSongId())                        .findFirst()                        .orElse(null);                if (song != null) {                    ArtistsEntity artist = artists.stream()                            .filter(a -> a.getArtistId() == song.getArtistId())                            .findFirst()                            .orElse(null);                    if (artist != null) {                        Pane musicTag = createMusicTag(song.getTitle(), artist.getName(), song.getSongUrl(), song.getImgUrl());                        musicTagsPane3.add(musicTag, col3, row3);                        col3++;                        if (col3 == maxColumns) {                            col3 = 0;                            row3++;                        }                    }                }            }            if (col3 != 0) {                row3++; // Ensure we move to the next row after finishing a playlist's songs            }        }    }    private void addMusicTags() {        int row4 = 0;        int col4 = 0;        // Add music tags to the music tags list        for (SongsEntity song : songs) {            for (ArtistsEntity artist : artists) {                if (song.getArtistId() == artist.getArtistId()) {                    Pane musicTag = createMusicTag2(song.getTitle(), artist.getName(), song.getSongUrl(), song.getImgUrl());                    musicTagsPane4.getChildren().add(musicTag);                }            }        }    }    private void addAlbumTags() {        gridPane1 = new GridPane();        gridPane1.setVgap(20);        gridPane1.setHgap(20);        gridPane1.prefHeightProperty().bind(scrollPane1.heightProperty());        gridPane1.setStyle("-fx-background-color: #181818");        gridPane2 = new GridPane();        gridPane2.setVgap(20);        gridPane2.setHgap(20);        gridPane2.prefHeightProperty().bind(scrollPane2.heightProperty());        gridPane2.setStyle("-fx-background-color: #181818");        gridPane3 = new GridPane();        gridPane3.setVgap(20);        gridPane3.setHgap(20);        gridPane3.prefHeightProperty().bind(scrollPane3.heightProperty());        gridPane3.setStyle("-fx-background-color: #181818");        int col = 0;        int col1 = 0;        int col2 = 0;        for (SongsEntity song : songs) {            if (song.getAlbumId() != null) {                if (song.getAlbumId() == 4) {                    for (ArtistsEntity artistsEntity : artists) {                        if (song.getArtistId() == artistsEntity.getArtistId()) {                            Pane pane = createMusicTag(song.getTitle(), artistsEntity.getName(), song.getSongUrl(), song.getImgUrl());                            gridPane1.add(pane, col, 1);                            col++;                        }                    }                }                if (song.getAlbumId() == 1) {                    for (ArtistsEntity artistsEntity : artists) {                        if (song.getArtistId() == artistsEntity.getArtistId()) {                            Pane pane = createMusicTag(song.getTitle(), artistsEntity.getName(), song.getSongUrl(), song.getImgUrl());                            gridPane2.add(pane, col1, 1);                            col1++;                        }                    }                }                if (song.getAlbumId() == 3) {                    for (ArtistsEntity artistsEntity : artists) {                        if (song.getArtistId() == artistsEntity.getArtistId()) {                            Pane pane = createMusicTag(song.getTitle(), artistsEntity.getName(), song.getSongUrl(), song.getImgUrl());                            gridPane3.add(pane, col2, 1);                            col2++;                        }                    }                }            }        }        scrollPane1.setContent(gridPane1);        scrollPane2.setContent(gridPane2);        scrollPane3.setContent(gridPane3);    }    private boolean isFavoriteSong(int songId) {        for (FavoriteSong favoriteSong : favoriteSongs) {            if (favoriteSong.getSongId() == songId) {                return true;            }        }        return false;    }    private boolean isInPlaylist(int songId, int playlistId) {        for (PlaylistSongsEntity playlistSong : playlistSongs) {            if (playlistSong.getSongId() == songId && playlistSong.getPlaylistId() == playlistId) {                return true;            }        }        return false;    }    private Pane createMusicTag(String title, String artist, String songUrl, String imgUrl) {        StackPane musicTag = new StackPane();        // Create a VBox to hold the ImageView and Label        VBox container = new VBox();        container.setAlignment(Pos.CENTER); // Make the VBox center-aligned        ImageView imageView = new ImageView(new Image(imgUrl));        imageView.setFitWidth(100);        imageView.setFitHeight(100);        // Create a label to display the song title and artist        Label tagNameLabel = new Label(title);        tagNameLabel.getStyleClass().add("tag-name");        tagNameLabel.setStyle("-fx-font-size: 14px;");        tagNameLabel.setAlignment(Pos.CENTER);        Label artistLabel = new Label(artist);        artistLabel.getStyleClass().add("tag-name");        artistLabel.setStyle("-fx-font-size: 10px;");        artistLabel.setAlignment(Pos.CENTER);        container.getChildren().addAll(imageView, tagNameLabel, artistLabel);        musicTag.getChildren().add(container);        musicTag.setOnMousePressed(event -> {            if (event.isPrimaryButtonDown()) {                playSong(songUrl);                playandpauseIV.setImage(new Image(getClass().getResource("/music/img/pause.png").toString()));                songIV.setImage(new Image(imgUrl));                songTitleLB.setText(title);                songTitleLB.setStyle("-fx-font-size:15px;-fx-font-weight: bold;");                artistLB.setText(artist);                artistLB.setStyle("-fx-font-size:12px;");                new SongBus().updatePlayCount(title);            } else if (event.isSecondaryButtonDown()) {                int songId = songs.stream().filter(song -> song.getSongUrl().equals(songUrl)).findFirst().get().getSongId();                if (isFavoriteSong(songId)) {                    favoriteItem.setText("Remove from Favorite");                    favoriteItem.setOnAction(event2 -> {                        System.out.println("Remove from Favorite");                        new FavoriteSongBus().removeFavoriteSong(LOGGED_USER.getUserId(), songId);                        favoriteSongs = new FavoriteSongBus().getFavoriteSongs(LOGGED_USER.getUserId());                    });                } else {                    favoriteItem.setText("Add to Favorite");                    favoriteItem.setOnAction(event2 -> {                        System.out.println("Add to Favorite");                        new FavoriteSongBus().addFavoriteSong(LOGGED_USER.getUserId(), songId);                        favoriteSongs = new FavoriteSongBus().getFavoriteSongs(LOGGED_USER.getUserId());                    });                }                selectedSongId = songId;                contextMenu.show(musicTag, event.getScreenX(), event.getScreenY());            }        });        musicTag.getStyleClass().add("music-tag");        return musicTag;    }    private Pane createMusicTag2(String title, String artist, String songUrl, String imgUrl) {        Pane musicTag = new Pane();        musicTag.setPrefSize(250, 60);        musicTag.setMaxSize(Region.USE_PREF_SIZE, Region.USE_PREF_SIZE);        musicTag.setMinSize(Region.USE_PREF_SIZE, Region.USE_PREF_SIZE);        HBox hBox = new HBox();        hBox.setSpacing(10);        hBox.setAlignment(Pos.CENTER);        ImageView imageView = new ImageView(new Image(imgUrl));        imageView.setFitWidth(60);        imageView.setFitHeight(60);        VBox vBox = new VBox();        Label label = new Label(title);        label.getStyleClass().add("tag-name");        Label label1 = new Label(artist);        label1.getStyleClass().add("tag-name");        label1.setStyle("-fx-font-size: 12px;");        vBox.getChildren().addAll(label, label1);        hBox.getChildren().addAll(imageView, vBox);        musicTag.getChildren().add(hBox);        musicTag.getStyleClass().add("music-tag");        musicTag.setOnMousePressed(event -> {            if (event.isPrimaryButtonDown()) {                playSong(songUrl);                playandpauseIV.setImage(new Image(getClass().getResource("/music/img/pause.png").toString()));                songIV.setImage(new Image(imgUrl));                songTitleLB.setText(title);                songTitleLB.setStyle("-fx-font-size:15px;-fx-font-weight: bold;");                artistLB.setText(artist);                artistLB.setStyle("-fx-font-size:12px;");                new SongBus().updatePlayCount(title);            } else if (event.isSecondaryButtonDown()) {                int songId = songs.stream().filter(song -> song.getSongUrl().equals(songUrl)).findFirst().get().getSongId();                if (isFavoriteSong(songId)) {                    favoriteItem.setText("Remove from Favorite");                    favoriteItem.setOnAction(event2 -> {                        System.out.println("Remove from Favorite");                        new FavoriteSongBus().removeFavoriteSong(LOGGED_USER.getUserId(), songId);                        favoriteSongs = new FavoriteSongBus().getFavoriteSongs(LOGGED_USER.getUserId());                    });                } else {                    favoriteItem.setText("Add to Favorite");                    favoriteItem.setOnAction(event2 -> {                        System.out.println("Add to Favorite");                        new FavoriteSongBus().addFavoriteSong(LOGGED_USER.getUserId(), songId);                        favoriteSongs = new FavoriteSongBus().getFavoriteSongs(LOGGED_USER.getUserId());                    });                }                selectedSongId = songId;                contextMenu.show(musicTag, event.getScreenX(), event.getScreenY());            }        });        return musicTag;    }    private Pane createArtistTag(String name, String imgUrl) {        StackPane artistTag = new StackPane();        VBox container = new VBox();        container.setAlignment(Pos.CENTER);        ImageView imageView = new ImageView(new Image(imgUrl));        imageView.getStyleClass().add("image");        imageView.setFitWidth(160);        imageView.setFitHeight(160);        Label tagNameLabel = new Label(name);        tagNameLabel.getStyleClass().add("tag-name");        tagNameLabel.setStyle("-fx-font-size: 16px;");        container.getChildren().addAll(imageView, tagNameLabel);        artistTag.getChildren().add(container);        artistTag.getStyleClass().addAll("image", "music-tag");        artistTag.prefWidthProperty().bind(container.widthProperty());        artistTag.setOnMousePressed(event -> {            createArtistInforStage(artists.stream().filter(artist -> artist.getName().equals(name)).findFirst().get());        });        return artistTag;    }    public void createArtistInforStage(ArtistsEntity artist) {        Stage stage = new Stage();        stage.initModality(Modality.APPLICATION_MODAL);        stage.setResizable(false);        VBox vBox = new VBox();        vBox.setPadding(new Insets(10));        vBox.setSpacing(10);        vBox.setAlignment(Pos.CENTER);        ImageView imageView = new ImageView(new Image(artist.getImageUrl()));        imageView.setFitWidth(200);        imageView.setFitHeight(200);        vBox.getChildren().add(imageView);        Label nameLabel = new Label(artist.getName());        nameLabel.getStyleClass().add("tag-name");        vBox.getChildren().add(nameLabel);        List<ArtistInfor> artistInfors = new ArtistInforBus().getArtistInfors("src/main/resources/information.xml");        for (ArtistInfor artistInfor : artistInfors) {            if (artistInfor.getStageName().equals(artist.getName())) {                Label realName = new Label("Name: " + artistInfor.getRealName());                realName.getStyleClass().add("tag-name");                vBox.getChildren().add(realName);                Label birthDay = new Label("BirthDay: " + artistInfor.getBirthDate());                birthDay.getStyleClass().add("tag-name");                vBox.getChildren().add(birthDay);                Label hometown = new Label("Hometown: " + artistInfor.getHometown());                hometown.getStyleClass().add("tag-name");                vBox.getChildren().add(hometown);                String hitSongs = "Hit songs: ";                Label hitSong = new Label();                for (String song : artistInfor.getHitSongs()) {                    hitSongs += song + ", ";                }                hitSong.setText(hitSongs.substring(0, hitSongs.length() - 2));                hitSong.getStyleClass().add("tag-name");                vBox.getChildren().add(hitSong);            }        }        Scene scene = new Scene(vBox);        stage.setScene(scene);        stage.showAndWait();    }    private void playSongFromPlaylist(String songUrl, List<PlaylistSongsEntity> playlistSongsInCurrentPlaylist) {        // Find the index of the currently selected song in the playlist        int index = -1;        for (int i = 0; i < playlistSongsInCurrentPlaylist.size(); i++) {            PlaylistSongsEntity ps = playlistSongsInCurrentPlaylist.get(i);            SongsEntity song = songs.stream()                    .filter(s -> s.getSongId() == ps.getSongId())                    .findFirst()                    .orElse(null);            if (song != null && song.getSongUrl().equals(songUrl)) {                index = i;                break;            }        }        // If the song is found in the playlist, play it and queue the rest        if (index != -1) {            // Clear the current song queue            songHistory.clear();            // Add the rest of the playlist to the queue            for (int i = index + 1; i < playlistSongsInCurrentPlaylist.size(); i++) {                PlaylistSongsEntity ps = playlistSongsInCurrentPlaylist.get(i);                SongsEntity nextSong = songs.stream()                        .filter(s -> s.getSongId() == ps.getSongId())                        .findFirst()                        .orElse(null);                if (nextSong != null) {                    songHistory.offer(nextSong);                }            }            playSong(songUrl);        }    }    private void createMenuAddingItems() {        contextMenu = new ContextMenu();        favoriteItem = new MenuItem("Add to Favorite");        favoriteItem.getStyleClass().add("menu-item");        Menu playlistMenu = new Menu("Add to Playlist");        playlistMenu.getStyleClass().add("menu-item");        if (playlists != null) {            for (PlaylistsEntity playlist : new PlaylistBus().getPlaylists(LOGGED_USER.getUserId())) {                MenuItem playlistItem = new MenuItem(playlist.getTitle());                playlistItem.setOnAction(event -> {                    int songId = selectedSongId;                    if (isInPlaylist(songId, playlist.getPlaylistId())) {                        new PlaylistBus().removeSongFromPlaylist(playlist.getPlaylistId(), songId);                    } else {                        new PlaylistBus().addSongToPlaylist(playlist.getPlaylistId(), songId);                    }                });                playlistMenu.getItems().add(playlistItem);            }        }        contextMenu.getItems().addAll(playlistMenu, favoriteItem);    }    @FXML    void playSong(String songUrl) {        System.out.println("Playing song: " + songUrl);        Media media = new Media(songUrl);        songIV.setClip(new Circle(songIV.getFitWidth() / 2, songIV.getFitHeight() / 2, songIV.getFitWidth() / 2));        playandpauseIV.setImage(new Image(getClass().getResource("/music/img/pause.png").toString()));        playBT.setOnAction(event -> pause());        addToSongHistory(songs.stream().filter(song -> song.getSongUrl().equals(songUrl)).findFirst().get());        try {            if (mediaPlayer != null) {                mediaPlayer.stop();                mediaPlayer.dispose(); // Release the media player resources            }            mediaPlayer = new MediaPlayer(media);            mediaPlayer.setVolume(soundSlider.getValue() / 100);            mediaPlayer.setOnPlaying(() -> {                totalDurationSeconds = (int) mediaPlayer.getTotalDuration().toSeconds();                updateDurationLabel(); // Cập nhật nhãn thời gian chờ                updateTimeSlider(); // Cập nhật thanh trượt thời gian                updateCurrentTimeLabel(); // Cập nhật nhãn thời gian hiện tại                rotateImage();                mediaPlayer.setCycleCount(0);            });            // Cập nhật thời gian hiện tại liên tục            mediaPlayer.currentTimeProperty().addListener((observable, oldValue, newValue) -> {                updateCurrentTimeLabel();                updateTimeSlider();            });            soundSlider.valueProperty().addListener((observable, oldValue, newValue) -> {                if (mediaPlayer != null) {                    mediaPlayer.setVolume(newValue.doubleValue() / 100.0);                }            });            // Update the media player's time when the slider is moved            durationSlider.valueProperty().addListener((observable, oldValue, newValue) -> {                if (durationSlider.isValueChanging()) {                    mediaPlayer.seek(Duration.seconds(newValue.doubleValue()));                }            });            mediaPlayer.setOnEndOfMedia(() -> {                if (mediaPlayer.getCycleCount() == 0) {                    System.out.println("Song has finished playing");//                    playandpauseIV.setImage(new Image(getClass().getResource("/music/img/ic_play (1).png").toString()));                    // Play a random song when the current song has finished playing                    SongsEntity randomSong = randomSong();                    playSong(randomSong.getSongUrl());                    songIV.setImage(new Image(randomSong.getImgUrl()));                    songTitleLB.setText(randomSong.getTitle());                    for (ArtistsEntity artist : artists) {                        if (randomSong.getArtistId() == artist.getArtistId()) {                            artistLB.setText(artist.getName());                        }                    }                } else {                    System.out.printf("Song has finished playing. Playing again\n");                    mediaPlayer.stop();                    mediaPlayer.seek(Duration.ZERO);                    mediaPlayer.play();                }            });            mediaPlayer.play();        } catch (Exception e) {            e.printStackTrace();        }    }    private void updateTimeSlider() {        // Đặt giá trị tối đa của thanh trượt thành thời lượng của media        durationSlider.setMax(mediaPlayer.getTotalDuration().toSeconds());        // Đặt giá trị của thanh trượt thành thời gian hiện tại của media        durationSlider.setValue(mediaPlayer.getCurrentTime().toSeconds());    }    private void updateDurationLabel() {        int durationSeconds = (int) mediaPlayer.getTotalDuration().toSeconds();        // Chuyển đổi sang định dạng mm:ss        int minutes = durationSeconds / 60;        int seconds = durationSeconds % 60;        finishDur.setText(String.format("%02d:%02d", minutes, seconds));    }    private void updateCurrentTimeLabel() {        // Lấy thời gian hiện tại của media        int currentTimeSeconds = (int) mediaPlayer.getCurrentTime().toSeconds();        // Chuyển đổi sang định dạng mm:ss        int minutes = currentTimeSeconds / 60;        int seconds = currentTimeSeconds % 60;        // Hiển thị thời gian hiện tại trên nhãn        startDur.setText(String.format("%02d:%02d", minutes, seconds));    }    @FXML    void pause() {        if (mediaPlayer != null && mediaPlayer.getStatus() == MediaPlayer.Status.PLAYING) {            playandpauseIV.setImage(new Image(getClass().getResource("/music/img/ic_play (1).png").toString()));            mediaPlayer.pause();            playBT.setOnAction(event -> resume());        }    }    private void resume() {        if (mediaPlayer != null && mediaPlayer.getStatus() == MediaPlayer.Status.PAUSED) {            playandpauseIV.setImage(new Image(getClass().getResource("/music/img/pause.png").toString()));            mediaPlayer.play();            playBT.setOnAction(event -> pause());        }    }    private void rotateImage() {        RotateTransition rotateTransition = new RotateTransition(Duration.seconds(totalDurationSeconds), songIV);        rotateTransition.setByAngle(360);        rotateTransition.setCycleCount(Timeline.INDEFINITE);        rotateTransition.setDuration(Duration.seconds(10));        rotateTransition.play();    }    @FXML    void sound(ActionEvent event) {        if (mediaPlayer != null) {            if (mediaPlayer.getVolume() == 0) {                mediaPlayer.setVolume(soundSlider.getValue() / 100);                soundIV.setImage(new Image(getClass().getResource("/music/img/ic_volume.png").toString()));            } else {                mediaPlayer.setVolume(0);                soundIV.setImage(new Image(getClass().getResource("/music/img/mute.png").toString()));            }        }    }    @FXML    void nextSong(ActionEvent event) {        if (mediaPlayer != null) {            SongsEntity randomSong = randomSong();            playSong(randomSong.getSongUrl());            songIV.setImage(new Image(randomSong.getImgUrl()));            songTitleLB.setText(randomSong.getTitle());            for (ArtistsEntity artist : artists) {                if (randomSong.getArtistId() == artist.getArtistId()) {                    artistLB.setText(artist.getName());                }            }        }    }    @FXML    void previousSong(ActionEvent event) {        if (mediaPlayer != null) {            SongsEntity previousSong = getPreviousSong();            playSong(previousSong.getSongUrl());            songIV.setImage(new Image(previousSong.getImgUrl()));            songTitleLB.setText(previousSong.getTitle());            for (ArtistsEntity artist : artists) {                if (previousSong.getArtistId() == artist.getArtistId()) {                    artistLB.setText(artist.getName());                }            }        }    }    private SongsEntity randomSong() {        int randomIndex = random.nextInt(songs.size());        return songs.get(randomIndex);    }    private void addToSongHistory(SongsEntity song) {        if (song != null) {            songHistory.offer(song);        }    }    private SongsEntity getPreviousSong() {        return songHistory.poll();    }    @FXML    void repeatOneSong() {        if (mediaPlayer != null) {            mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);            repeatIV.setImage(new Image(getClass().getResource("/music/img/repeat-once.png").toString()));            repeatBT.setOnAction(event -> exitRepeatMode());        }    }    void exitRepeatMode() {        if (mediaPlayer != null) {            mediaPlayer.setCycleCount(0);            repeatIV.setImage(new Image(getClass().getResource("/music/img/ic_repeat.png").toString()));            repeatBT.setOnAction(event -> repeatOneSong());        }    }    @FXML    private void showCreatePlaylist() {        if (LOGGED_USER != null) {            Stage primaryStage = new Stage();            AnchorPane root = new AnchorPane();            root.setPrefHeight(250.0);            root.setPrefWidth(400.0);            root.getStylesheets().add(getClass().getResource("/music/css/style.css").toExternalForm());            root.getStyleClass().addAll("primary_color", "borderkhungdash");            Label playlistNameLabel = new Label("Playlist Name");            playlistNameLabel.setLayoutX(147.0);            playlistNameLabel.setLayoutY(68.0);            playlistNameLabel.setTextFill(javafx.scene.paint.Color.WHITE);            playlistNameLabel.setFont(new Font("Berlin Sans FB", 18));            TextField playlistNameTF = new TextField();            playlistNameTF.setLayoutX(71.0);            playlistNameTF.setLayoutY(108.0);            playlistNameTF.setPrefHeight(34.0);            playlistNameTF.setPrefWidth(256.0);            playlistNameTF.setPromptText("your playlist");            playlistNameTF.setStyle("-fx-background-color: transparent;");            playlistNameTF.getStylesheets().add(getClass().getResource("/music/css/style.css").toExternalForm());            playlistNameTF.getStyleClass().add("addplaylist");            playlistNameTF.setFont(new Font("Times New Roman", 15));            Button addButton = new Button("Add");            addButton.setLayoutX(176.0);            addButton.setLayoutY(158.0);            addButton.setPrefHeight(26.0);            addButton.setPrefWidth(48.0);            addButton.getStylesheets().add(getClass().getResource("/music/css/styleLogin.css").toExternalForm());            addButton.getStyleClass().addAll("button-border", "click_btn");            addButton.setFont(new Font("Berlin Sans FB", 15));            addButton.setOnAction(event -> {                String playlistName = playlistNameTF.getText();                if (!playlistName.isEmpty()) {                    new PlaylistBus().createPlaylist(LOGGED_USER.getUserId(), playlistName);                    createMenuAddingItems();                    primaryStage.close();                } else {                    showErrorAlert("Error", "Playlist name cannot be empty");                }                primaryStage.close();            });            root.getChildren().addAll(playlistNameLabel, playlistNameTF, addButton);            Scene scene = new Scene(root);            primaryStage.setScene(scene);            primaryStage.getIcons().add(new Image(getClass().getResource("/music/img/logoVL.png").toString()));            primaryStage.initModality(Modality.APPLICATION_MODAL);            primaryStage.showAndWait();        } else {            showErrorAlert("Login Required", "Please login to access this feature.");        }    }    @FXML    void search() {        searchTF.setOnKeyPressed(event -> {            if (event.getCode().equals(KeyCode.ENTER)) {                String in4 = searchTF.getText().trim().toLowerCase();                if (in4.isEmpty()) {                    showErrorAlert("Error", "Please enter a search term");                } else {                    boolean found = false;                    List<ArtistsEntity> searchArtistResults = new ArrayList<>();                    for (ArtistsEntity artist : artists) {                        if (artist.getName().toLowerCase().contains(in4)) {                            searchArtistResults.add(artist);                            found = true;                        }                    }                    displayArtist(searchArtistResults);                    if (!found) {                        List<AlbumsEntity> searchAlbumResults = new ArrayList<>();                        for (AlbumsEntity album : albums) {                            if (album.getTitle().toLowerCase().contains(in4)) {                                searchAlbumResults.add(album);                                found = true;                            }                        }                        displayAlbum(searchAlbumResults);                    }                    if (!found) {                        List<SongsEntity> searchSongResults = new ArrayList<>();                        for (SongsEntity song : songs) {                            if (song.getTitle().toLowerCase().contains(in4)) {                                searchSongResults.add(song);                                found = true;                            }                        }                        displaySong(searchSongResults);                    }                    if (!found) {                        showErrorAlert("Not Found", "No results found for your search term");                    }                }            }        });    }    private void displaySong(List<SongsEntity> searchSongResults) {        BorderPane searchPane = new BorderPane();        ScrollPane searchScrollPane = new ScrollPane();        FlowPane searchFlowPane = new FlowPane();        searchFlowPane.setHgap(20);        searchFlowPane.setVgap(20);        searchFlowPane.setPadding(new Insets(15, 10, 15, 10));        for (SongsEntity song : searchSongResults) {            for (ArtistsEntity artist : artists) {                if (song.getArtistId() == artist.getArtistId()) {                    Pane musicTag = createMusicTag2(song.getTitle(), artist.getName(), song.getSongUrl(), song.getImgUrl());                    searchFlowPane.getChildren().add(musicTag);                }            }        }        searchPane.setStyle("-fx-background-color: #181818; -fx-padding: 15px 0 0 10px;");        searchFlowPane.prefWidthProperty().bind(searchScrollPane.widthProperty());        searchFlowPane.prefHeightProperty().bind(searchScrollPane.heightProperty());        searchFlowPane.setStyle("-fx-background-color: #181818");        searchScrollPane.setContent(searchFlowPane);        searchScrollPane.setFitToWidth(true);        searchScrollPane.setFitToHeight(true);        searchScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        searchScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        searchScrollPane.setStyle("-fx-background-color: #181818");        searchPane.setCenter(searchScrollPane);        borderPane.setCenter(searchPane);    }    private void displayAlbum(List<AlbumsEntity> searchAlbumResult) {        BorderPane searchPane = new BorderPane();        ScrollPane searchScrollPane = new ScrollPane();        FlowPane searchFlowPane = new FlowPane();        searchFlowPane.setHgap(20);        searchFlowPane.setVgap(20);        searchFlowPane.setPadding(new Insets(15, 10, 15, 10));        for (AlbumsEntity album : searchAlbumResult) {            Pane pane = new Pane();            pane.setPrefSize(250, 350);            pane.setMaxSize(Region.USE_PREF_SIZE, Region.USE_PREF_SIZE);            pane.setMinSize(Region.USE_PREF_SIZE, Region.USE_PREF_SIZE);            pane.getStyleClass().add("music-tag");            // Kiểm tra URL hình ảnh            Image image = album.getImageUrl() != null && !album.getImageUrl().isEmpty() ? new Image(album.getImageUrl()) : new Image("path/to/default/image");            ImageView imageView = new ImageView(image);            imageView.setFitWidth(250);            imageView.setFitHeight(250);            VBox vBox = new VBox();            vBox.setSpacing(10);            vBox.setAlignment(Pos.CENTER);            vBox.setPadding(new Insets(10));            vBox.prefWidthProperty().bind(pane.widthProperty());            vBox.prefHeightProperty().bind(pane.heightProperty());            vBox.setStyle("-fx-background-color: #181818");            vBox.getChildren().add(imageView);            Label label = new Label(album.getTitle());            label.getStyleClass().add("tag-name");            label.setStyle("-fx-font-size: 16px;");            vBox.getChildren().add(label);            Label label1 = new Label(album.getReleaseYear().toString());            label1.getStyleClass().add("tag-name");            label1.setStyle("-fx-font-size: 14px;");            vBox.getChildren().add(label1);            int count = 0;            for(SongsEntity song : songs){                Integer albumId = song.getAlbumId();                if(albumId != null && albumId.intValue() == album.getAlbumId()){                    count++;                }            }            Label label2 = new Label("Number of songs: " + count);            label2.getStyleClass().add("tag-name");            label2.setStyle("-fx-font-size: 14px;");            vBox.getChildren().add(label2);            pane.getChildren().add(vBox);            searchFlowPane.getChildren().add(pane);        }        searchPane.setStyle("-fx-background-color: #181818; -fx-padding: 15px 0 0 10px;");        searchFlowPane.prefWidthProperty().bind(searchScrollPane.widthProperty());        searchFlowPane.prefHeightProperty().bind(searchScrollPane.heightProperty());        searchFlowPane.setStyle("-fx-background-color: #181818");        searchScrollPane.setContent(searchFlowPane);        searchScrollPane.setFitToWidth(true);        searchScrollPane.setFitToHeight(true);        searchScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        searchScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        searchScrollPane.setStyle("-fx-background-color: #181818");        searchPane.setCenter(searchScrollPane);        borderPane.setCenter(searchPane);    }    private void displayArtist(List<ArtistsEntity> searchArtistResult) {        BorderPane searchPane = new BorderPane();        ScrollPane searchScrollPane = new ScrollPane();        FlowPane searchFlowPane = new FlowPane();        searchFlowPane.setHgap(20);        searchFlowPane.setVgap(20);        searchFlowPane.setPadding(new Insets(15, 10, 15, 10));        for (ArtistsEntity song : searchArtistResult) {            Pane artistTag = createArtistTag(song.getName(), song.getImageUrl());            searchFlowPane.getChildren().add(artistTag);        }        searchPane.setStyle("-fx-background-color: #181818; -fx-padding: 15px 0 0 10px;");        searchFlowPane.prefWidthProperty().bind(searchScrollPane.widthProperty());        searchFlowPane.prefHeightProperty().bind(searchScrollPane.heightProperty());        searchFlowPane.setStyle("-fx-background-color: #181818");        searchScrollPane.setContent(searchFlowPane);        searchScrollPane.setFitToWidth(true);        searchScrollPane.setFitToHeight(true);        searchScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        searchScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);        searchScrollPane.setStyle("-fx-background-color: #181818");        searchPane.setCenter(searchScrollPane);        borderPane.setCenter(searchPane);    }}