package Controller;import Bus.ArtistBus;import Bus.SongBus;import DTO.ArtistsEntity;import DTO.SongsEntity;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.geometry.Insets;import javafx.geometry.Pos;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.Button;import javafx.scene.control.Label;import javafx.scene.control.ScrollPane;import javafx.scene.image.ImageView;import javafx.scene.layout.*;import javafx.stage.Stage;import java.io.IOException;import java.net.URL;import java.util.List;import java.util.ResourceBundle;import static Controller.LoginController.LOGGED_USER;public class Dashboard_Controller   {    private static Stage loginStage;    private static Stage logupStage;    private BorderPane homePane;    private Pane favoritePane;    private Pane songsPane;    private Pane albumPane;    List<SongsEntity> songs = new SongBus().getAllSongs();    List<ArtistsEntity> artists = new ArtistBus().getAllArtists();    private GridPane musicTagsPane;    @FXML    private BorderPane borderPane;    @FXML    private Button logBT;    @FXML    private Button signupBT;    @FXML    void login(ActionEvent event) {        if (LOGGED_USER != null) {        } else  {            try {                FXMLLoader fxmlLoader = new FXMLLoader(Dashboard_Controller.class.getResource("/GUI/login.fxml"));                Parent root = fxmlLoader.load();                loginStage = new Stage();                loginStage.initModality(javafx.stage.Modality.APPLICATION_MODAL);                loginStage.setTitle("Login");                loginStage.setScene(new Scene(root));                loginStage.setResizable(false);                loginStage.show();            } catch (IOException e) {                e.printStackTrace();            }        }    }    @FXML    void signup(ActionEvent event) {        if (LOGGED_USER != null) {        } else  {            try {                FXMLLoader fxmlLoader = new FXMLLoader(Dashboard_Controller.class.getResource("/GUI/logup.fxml"));                Parent root = fxmlLoader.load();                logupStage = new Stage();                logupStage.initModality(javafx.stage.Modality.APPLICATION_MODAL);                logupStage.setTitle("Sign Up");                logupStage.setScene(new Scene(root));                logupStage.setResizable(false);                logupStage.show();            } catch (IOException e) {                e.printStackTrace();            }        }    }    // Method to close the login window    public static void closeLogin() {        if (loginStage != null) {            loginStage.close();        }    }    // Method to close the logup window    public static void closeLogup() {        if (logupStage != null) {            logupStage.close();        }    }    @FXML    void showHomePane(ActionEvent event) throws IOException {        homePane = getHomePane();        borderPane.setCenter(homePane);    }    @FXML    void showFavoritePane(ActionEvent event) {        borderPane.setCenter(favoritePane = createFavoritePane());    }    @FXML    void showSongsPane(ActionEvent event) {        songsPane = createSongsPane();        borderPane.setCenter(songsPane);    }    @FXML    void showAlbumPane(ActionEvent event) throws IOException {        borderPane.setCenter(albumPane = createAlbumPane());    }    public BorderPane getHomePane(){        homePane = new BorderPane();        VBox vbox = new VBox();        Label trendingLabel = new Label("Trending Music");        trendingLabel.setStyle("-fx-font-size: 25px; -fx-font-weight: bold;-fx-text-fill:#fff;-fx-font-family:'Times New Roman';");        trendingLabel.setAlignment(Pos.CENTER);        VBox.setMargin(trendingLabel, new Insets(10, 0, 10, 0));        vbox.getChildren().addAll(trendingLabel, createMusicTagScrollPane());        homePane.setCenter(vbox);        return homePane;    }    private ScrollPane createMusicTagScrollPane() {        ScrollPane musicTagScrollPane = new ScrollPane();        musicTagScrollPane.setFitToWidth(true);        musicTagScrollPane.setFitToHeight(true);        musicTagScrollPane.prefWidthProperty().bind(homePane.widthProperty());        musicTagScrollPane.prefHeightProperty().bind(homePane.heightProperty());        musicTagsPane = new GridPane();        musicTagsPane.setHgap(10);        musicTagsPane.setVgap(10);        addMusicTags();        musicTagScrollPane.setContent(musicTagsPane);        musicTagScrollPane.setStyle("-fx-background-color: #181818;");        musicTagsPane.setStyle("-fx-background-color: #181818;");        return musicTagScrollPane;    }    private Pane createFavoritePane() {        Pane pane = new Pane();        Button button = new Button("Favorite Pane");        button.setOnAction(event -> {            System.out.println("Favorite Pane");        });        pane.getChildren().add(button);        pane.setStyle("-fx-background-color: lightgreen;");        pane.setPrefSize(100, 300);        return pane;    }    private Pane createSongsPane() {        Pane pane = new Pane();        Button button = new Button("Songs Pane");        button.setOnAction(event -> {            System.out.println("Songs Pane");        });        pane.getChildren().add(button);        pane.setStyle("-fx-background-color: lightcoral;");        pane.setPrefSize(400, 300);        return pane;    }    private Pane createAlbumPane() throws IOException {        return new Pane();    }    private void addMusicTags() {        // Add music tags to the music tags list        int row = 0;        int col = 0;        List<SongsEntity> songs = new SongBus().getAllSongs();        List<ArtistsEntity> artists = new ArtistBus().getAllArtists();        for (SongsEntity song : songs) {            for (ArtistsEntity artist : artists) {                if (song.getArtistId() == artist.getArtistId()) {                    String s = song.getTitle() + " - " + artist.getName();                    Pane musicTag = createMusicTag(s, song.getSongUrl(), song.getImgUrl());                    musicTagsPane.add(musicTag, col, row);                    if (col == 2) {                        col = 0;                        row++;                    } else {                        col++;                    }                }            }        }    }    private Pane createMusicTag(String song, String songUrl, String imgUrl) {        StackPane musicTag = new StackPane();        musicTag.getStyleClass().add("music-tag");        musicTag.setStyle("-fx-border-width: 5px; -fx-border-color: white");        Label tagNameLabel = new Label(song);        tagNameLabel.getStyleClass().add("tag-name");        musicTag.getChildren().add(tagNameLabel);        musicTag.setOnMouseClicked(event -> {            playSong(songUrl);        });        return musicTag;    }    private void playSong(String songUrl) {    }}